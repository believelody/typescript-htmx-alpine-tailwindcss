<ul {{#if id}}id="{{id}}"{{/if}}
  class="absolute overflow-hidden p-1 max-w-sm flex flex-col"
  :class="`${setNotificationsPosition(position)}`"
  x-ref="list"
>
  <template x-for="notification in notifications" :key="notification.id">
    <li
      x-data="{ show: false }"
      x-show="show"
      x-ref="item"
      x-transition:enter="animate-slide-in-left"
      x-transition:leave="animate-slide-out-left"
      x-effect="
        show = true;
        await new Promise(resolve => {
          timer.id = setTimeout(() => {
            show = false;
          }, timeout);
        });
        remove(notification.id);
      "
      class="relative z-40 p-2 box-border"
    >
      <div class="p-2 rounded border-2 box-border"
        :class="`border ${borderFromNotificationType(notification.type)} border-l-[12px]`"
      >
        <section class="flex items-start justify-between">
          <h4>
            <b x-text="notification.title"></b>
          </h4>
          {{> button/simple x-on:click="show = false; setTimeout(() => remove(notification), timeout)" icon=(object component=(partial "icon/close" size=6 stroke="none")) sr-only="Close notification" class="p-1 rounded-full focus:bg-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600
        dark:hover:text-white inline-flex items-center justify-end text-sm" }}
        </section>
        <p x-text="notification.message"></p>
      </div>
    </li>
  </template>
</ul>

<script>
  function borderFromNotificationType(notificationType) {
    switch (notificationType) {
      case "success":
        return `border-success-500 bg-success-50`;
      case "danger":
        return `border-danger-500 bg-danger-50`;
      case "info":
        return `border-info-500 bg-info-50`;
      case "warning":
        return `border-warning-500 bg-warning-50`;
      default:
        return "";
    }
  };
  function setNotificationsPosition(position) {
    switch(position) {
      case "top-right":
        return "top-0 right-0";
      case "top-center":
        return "top-0 left-1/2";
      case "bottom-left":
        return "bottom-0 left-0";
      case "bottom-right":
        return "bottom-0 right-0";
      case "bottom-center":
        return "bottom-0 left-1/2";
      case "top-left":
      default:
        return "top-0 left-0";
    }
  }
</script>